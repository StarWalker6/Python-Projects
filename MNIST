import numpy as np
import pandas as pd
from matplotlib import pyplot as plt

data = pd.read_csv() 
data.head()

data = np.array(data)
m, n = data.shape
data_dev = data[0:1000].T
Y_dev = data_dev[0]
X_dev = data_dev[1:n]
#Where Y is output, the correct digits, 
#X is the matrix containing the input data

data_train = data[1000:m].T
Y_train = data_train[0]
X_train = data_train[1:n]
X_train = X_train / 255.

# Nurueal network layer structure
def init_params():
    W1 = np.random.rand(10, 784) - 0.5
    b1 = np.random.rand(10, 1) - 0.5
    W2 = np.random.rand(10, 10) - 0.5
    b2 = np.random.rand(10, 1) - 0.5
    return W1, b1, W2, b2
    
#Similar to Sigma function for the 1st hidden layer
def Relu(Z):
    return np.maximum(Z, 0)
    
def sigmoid(Z):
    A = 1.0/(1.0+np.exp(-Z))
    return A
    
def forward_prop(W1, b1, W2, b2, X):
    Z1 = W1.dot(X) + b1
    A1 = Relu(Z1)
    Z2 = W2.dot(A1) + b2
    A2 = sigmoid(Z2)
    return Z1, A1, Z2, A2

def Digits(Y):
    Digits_Y = np.zeros((Y.size, Y.max() + 1))
    Digits_Y[np.arange(Y.size), Y] = 1
    Digits_Y = Digits_Y.T
    return Digits_Y

def deriv_ReLU(Z):
    return Z > 0

def back_prop(Z1, A1, Z2, A2, W1, W2, X, Y):
    Digits_Y = Digits(Y)
    delta_Cost_2 = A2 - Digits_Y
    dW2 = (1 / m) * delta_Cost_2.dot(A1.T)
    #db2 is the average of the aboslute error
    db2 = (1 / m) * np.sum(delta_Cost_2, 0)
    delta_Cost_1 = W2.T.dot(delta_Cost_2) * deriv_ReLU(Z1)
    dW1 = 1 / m * delta_Cost_1.dot(X.T)
    db1 = 1 / m * np.sum(delta_Cost_1)
    return dW1, db1, dW2, db2

def update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):
    W1 = W1 - alpha * dW1
    b1 = b1 - alpha * db1
    W2 = W2 - alpha * dW2
    b2 = b2 - alpha * db2
    return W1, b1, W2, b2
    
    def get_predictions(A2) :
    return np.argmax(A2, 0)

def get_accuracy(predictions, Y):
    print(predictions, Y)
    return np.sum(predictions == Y) / Y.size

def gradient_descent(X, Y, iterations, alpha):
    W1, b1, W2, b2 = init_params() 
    for i in range(iterations):
        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)
        dW1, db1, dW2, db2 = back_prop(Z1, A1, Z2, A2, W1, W2, X, Y) 
        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)
        if i % 10 == 0:
            print ("Iteration: ", i)# every 50 prints the statistics
            print ("Accuracy: ", get_accuracy(get_predictions(A2), Y))
    return W1, b1, W2, b2
    
    def make_predictions(X, W1, b1, W2, b2):
    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)
    predictions = get_predictions(A2)
    return predictions

def test_prediction(index, W1, b1, W2, b2):
    current_image = X_train[:, index, None]
    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)
    label = Y_train[index]
    print("Prediction: ", prediction)
    print("Label: ", label)
    
    current_image = current_image.reshape((28, 28)) * 255
    plt.gray()
    plt.imshow(current_image, interpolation ='nearest')
    plt.show()
    
    import random 
for k in range(0,5):
    k = random.randint(1,50000)
    test_prediction(k, W1, b1, W2, b2)
    
    
