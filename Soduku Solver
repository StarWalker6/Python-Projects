from collections import Counter

soduku_game = [[0, 0, 0], [8, 0, 7], [9, 1, 0],
               [9, 0, 0], [3, 4, 0], [2, 0, 0],
               [0, 0, 5], [0, 0, 0], [0, 7, 0],

               [5, 9, 3], [7, 0, 2], [0, 6, 4],
               [0, 0, 1], [0, 0, 0], [0, 3, 8],
               [8, 7, 0], [6, 3, 1], [0, 9, 2],

               [7, 4, 0], [0, 0, 0], [0, 2, 0],
               [0, 0, 0], [0, 0, 4], [3, 0, 0],
               [0, 5, 2], [1, 7, 0], [0, 0, 0]]
               
row(section):
    global soduku_game
    complete_row = []
    for i in range(3):
        complete_row += soduku_game[section // 3 * 3 + i]
    return complete_row


def column(section, entery):
    global soduku_game
    complete_column = []
    for i in range(9):
        complete_column.append(soduku_game[i * 3 + section % 3][entery])
    return complete_column


def box(section):
    global soduku_game
    complete_box = []
    for i in range(3):
        complete_box += soduku_game[section // 9 * 9 + section % 3 + 3 * i]
    return complete_box

is_valid(section, entery, number):
    global soduku_game
    if row(section).count(number) != 0:
      return False
    if column(section, entery).count(number) != 0:
     return False
    if box(section).count(number) != 0:
      return False
    return True
   
# solver
def soduku_solver():
    global soduku_game
    for n in range(0, 81):
        section = n // 3
        entery = n % 3
        # or replace n with: for section in range(27):
        #     for entery in range(3):
        if soduku_game[section][entery] == 0:
            for number in range(1, 10):
                if is_valid(section, entery, number):
                    soduku_game[section][entery] = number
                    soduku_solver()
                    soduku_game[section][entery] = 0
            return
    for i in range(9):
        print(soduku_game[3 * i:3 * i + 3])

soduku_solver()
